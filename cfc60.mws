{VERSION 6 0 "IBM INTEL NT" "6.0" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 1 255 0 0 1 0 1 0 0 
1 0 0 0 0 1 }{PSTYLE "Normal" -1 0 1 {CSTYLE "" -1 -1 "Times" 1 12 0 
0 0 1 2 2 2 2 2 2 1 1 1 1 }1 1 0 0 0 0 1 0 1 0 2 2 0 1 }{PSTYLE "Text \+
Output" -1 6 1 {CSTYLE "" -1 -1 "Courier" 1 10 0 0 255 1 2 2 2 2 2 1 
2 1 3 1 }1 1 0 0 0 0 1 0 1 0 2 2 0 1 }{PSTYLE "Maple Plot" -1 13 1 
{CSTYLE "" -1 -1 "Times" 1 12 0 0 0 1 2 2 2 2 2 2 1 1 1 1 }3 1 0 0 0 
0 1 0 1 0 2 2 0 1 }}
{SECT 0 {EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "
> " 0 "" {MPLTEXT 1 0 1150 "rnd := proc(d)                            \+
                                                                      \+
                                      local r, i;                     \+
                                                                      \+
                                                                      \+
                                                                      \+
                                           r := rand(-100..100);      \+
                                                                      \+
                                                     for i from 0 by 1
 while i = 0 do                                                       \+
                                                                      \+
                                                                      \+
                                    i := r();\nend do;                \+
                                                                      \+
                                                      i / d           \+
                                                                      \+
                                                  end proc:" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 10793 "cfc := proc(f1, cfc, sk, \+
Sp, f2, Gn, dgs)                                                      \+
                                        global g_pk;                  \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
    local p_T, p_k, p_wd, p_wa, p_den, p_a0, p_a1, p_a2, p_b1, p_b2, p
_t, i, p_dt, p_max_v, p_x0, p_x1, p_x2, p_y0, p_y1, p_y2, p_offset;   \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
      p_T := 1 / f1:                                                  \+
                                                                      \+
                                  if (sk = 0) then                    \+
                                                                      \+
                                                                      \+
                     p_k := 2.0775:                                   \+
                                                                      \+
                                                                else  \+
                                                                      \+
                                                                      \+
                                 p_k := 1.25 / 0.6:                   \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
            end if:                                                   \+
                                                                      \+
                      p_offset := 300:                                \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                     p_wd := 2 * Pi * cfc * p_k:                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                      p_wa := evalf[dg
s](tan((p_wd * p_T) / 2)):                                            \+
                                                                      \+
                                              p_den:= 1 + sqrt(2) * p_
wa + p_wa^2:                                                          \+
                                                                      \+
                       p_a0 := evalf[dgs]((p_wa^2) / p_den):          \+
                                                                      \+
                                                           p_a1 := 2 *
 p_a0:                                                                \+
                                                                      \+
                                        p_a2 := p_a0:                 \+
                                                                      \+
                                                                      \+
                  p_b1 := evalf[dgs]((-2 * ((p_wa^2) - 1)) / p_den):  \+
                                                                      \+
                                                                     p
_b2 := evalf[dgs]((-1 + sqrt(2) * p_wa - (p_wa^2)) / p_den):          \+
                                                                  if (
g_pk > 10) then                                                       \+
                                                                      \+
 printf(\"\\n\\t\\ta0 = %.30f;\\n\", p_a0);                           \+
                                                                      \+
                                      printf(\"\\t\\ta1 = %.30f;\\n\",
 p_a1);                                                               \+
                                                                  prin
tf(\"\\t\\ta2 = %.30f;\\n\", p_a2);                                   \+
                                                                      \+
                                        printf(\"\\t\\tb1 = %.30f;\\n
\", p_b1);                                                            \+
                                                                      \+
          printf(\"\\t\\tb2 = %.30f;\\n\\n\", p_b2);                  \+
                                                                      \+
            g_pk := 0;                                                \+
                                                                      \+
               end if;                                                \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
          p_dt := ((2 * Pi * f2) / f1) * 1.01:                        \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                  p_t := Pi/2 -  p_dt \+
* (Sp / 2 - p_offset):                                                \+
                                                                      \+
                                                                      \+
  p_max_v := 0;                                                       \+
                                                                      \+
                                           p_x0 := 0:                 \+
                                                                      \+
                                                                     p
_x1 := 0:                                                             \+
                                                                      \+
                              p_x2 := 0:                              \+
                                                                      \+
                                                                 p_y0 \+
:= 0:                                                                 \+
                                                                      \+
                     p_y1 := 0;                                       \+
                                                                      \+
                                                   p_y2 := 0:         \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
     for i from 1 to (Sp + p_offset) do                               \+
                                                                      \+
                                                                      \+
    p_t := p_t + p_dt:                                                \+
                                                                      \+
                                                            p_x0 := ev
alf[dgs](Gn * sin(p_t));                                              \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                        p_y0 := evalf[dgs](p_a0 * p_x0
 + p_a1 * p_x1 + p_a2 * p_x2 + p_b1 * p_y1 + p_b2 * p_y2);            \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                     p_x2 := p_x1;\np_x1 := p_x0;                     \+
                                                                      \+
                                                            p_y2 := p_
y1; \np_y1 := p_y0;                                                   \+
                                                                      \+
                                                 if ((i > p_offset or \+
f2 < cfc) and p_max_v < abs(p_y0)) then                               \+
                                                                      \+
                                           p_max_v := abs(p_y0);      \+
                                                                      \+
                                                                      \+
                            end if;                                   \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                         end do;                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                               evalf[d
gs](20 * log[10](p_max_v / Gn))                                       \+
                                                                      \+
                                                                      \+
         end proc:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 8713 "wit
h(plots):                                                             \+
                                                                      \+
 N := 70:                                                             \+
                                                                      \+
                                               step := 10:            \+
                                                                      \+
                                                                      \+
                 offset := 0:                                         \+
                                                                      \+
                                                            mv := 0:  \+
                                                                      \+
                                                                      \+
               X0 := Array(1..N):                                     \+
                                                                      \+
                                Y0 := Array(1..N):                    \+
                                                                      \+
                                    ix := 10:                         \+
                                                                      \+
                                   for h in [1] do                    \+
                                                                      \+
                                                     for k in [49] do \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                        printf(\"\\ncf
c(%d):\\n\", k);                                                      \+
                                                                      \+
   g_pk := 1:                                                         \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                             for i from 1 to N do     \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                          X0[i] := offset + i * step:                 \+
                                                                      \+
                                                               Y0[i] :
= cfc(100000, k, h, 500, offset + i * step, 1, 30);                   \+
                                                                      \+
                                                     if (mv > Y0[i]) t
hen                                                                   \+
                                                                      \+
                           mv := Y0[i];                               \+
                                                                      \+
                                                                   end
 if;                                                                  \+
                                                                      \+
                                                                      \+
                                                                      \+
                               end do:                                \+
                                                                      \+
                                 ix := ix + 1:                        \+
                                                                      \+
                             if h = 0 then                            \+
                                                                      \+
                          G[ix] := plot(X0, Y0, x=offset..offset + N *
 step, thickness = 1, color = coral):                                 \+
                                                else                  \+
                                                                      \+
                                                 G[ix] := plot(X0, Y0,
 x=offset..offset + N * step, thickness = 1, color = red):            \+
                                                                      \+
 end if:\nend do:                                                     \+
                                                                      \+
       end do;                                                        \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                      \+
                                                                     l
ine  := unapply((-y1 * x2 - x * y2 + x * y1 + x1 * y2) / (-x2 + x1), x
1, y1, x2, y2):                                                       \+
                                                                      \+
                                            G[1]  := plot([100, y, y=0
..mv], x=offset..offset + N * step, linestyle = dot, color = black):  \+
                                                                      \+
                                                                      \+
        G[2]  := plot([200, y, y=0..mv], x=offset..offset + N * step, \+
linestyle = dot, color = black):                                      \+
                                                                      \+
                                    G[3]  := plot([400, y, y=0..mv], x
=offset..offset + N * step, linestyle = dot, color = black):          \+
                                                                      \+
                                                                 G[4] \+
 := plot([x,  -3, x=offset..offset + N * step], linestyle = dot, color
 = black):                                                            \+
                                                                      \+
            G[5]  := plot([x, -12, x=offset..offset + N * step], lines
tyle = dot, color = black):                                           \+
                                                                      \+
                         G[6]  := plot([x, -24, x=offset..offset + N *
 step], linestyle = dot, color = black):                              \+
                                                                      \+
  G[7]  := plot([x,  -6, x=offset..offset + N * step], linestyle = dot
, color = black):                                                     \+
                                                          G[8]  := plo
t([x,  -12, x=offset..offset + N * step], linestyle = dot, color = bla
ck):                                                                  \+
                                                                      \+
                                                                      \+
                                             G[9]  := plot(line(200, -
6, 400, -12), x=offset..offset + N * step, y=1..mv, color = green, thi
ckness = 1, linestyle = dash):                                        \+
                                                                      \+
                                                                      \+
                                                                      \+
                    G[10] := plot(line(200, -12, 400, -24), x=offset..
offset + N * step, y=1..mv, color = blue, thickness = 1, linestyle = d
ash):                         display(seq(G[i], i=1..ix), axes = frame
d, title=\"Amplitude Frequency Characteristic\", font = [TIMES,ROMAN,1
0], titlefont = [TIMES,ROMAN,14], labeldirections = [horizontal, verti
cal], labels = [\"f [Hz]\", \"A [dB]\"]);" }{TEXT -1 0 "" }}{PARA 6 "
" 1 "" {TEXT -1 0 "" }}{PARA 6 "" 1 "" {TEXT -1 8 "cfc(49):" }}{PARA 
13 "" 1 "" {GLPLOT2D 1293 561 561 {PLOTDATA 2 "62-%'CURVESG6%7S7$$\"$+
\"\"\"!$!3:++++*pej#!#;7$F($!3-CkUPaTyDF-7$F($!3I(\\[nhC%GDF-7$F($!3y[
%>0r/AZ#F-7$F($!3`S#eA97cT#F-7$F($!3))z_f[&)GfBF-7$F($!32qyMn$pqI#F-7$
F($!3w*>>)H%**HD#F-7$F($!3_.#zIA!3(>#F-7$F($!3B7W%*\\.MT@F-7$F($!3'y'R
7R]+%3#F-7$F($!3')f]9mS]L?F-7$F($!3UGPpJ>lw>F-7$F($!3$))4;pNm&>>F-7$F(
$!3'>2=z#Qbk=F-7$F($!3i)R$H\"=(f9=F-7$F($!3k]ja'*Q>b<F-7$F($!3=8RUA:([
q\"F-7$F($!3G$[G#QYLY;F-7$F($!3m5A-x&>Xf\"F-7$F($!343NjU-nP:F-7$F($!31
k*)fKi`$[\"F-7$F($!3Z!\\e@2`qU\"F-7$F($!3AH(R()*Q=v8F-7$F($!3$>mDz)fB>
8F-7$F($!3aBPYK=7h7F-7$F($!3(H1(H*GL0@\"F-7$F($!3_T'enF'*e:\"F-7$F($!3
[G4d'*3X*4\"F-7$F($!3<ls>/,BW5F-7$F($!3aR]v\"[6!3**!#<7$F($!30z'4!>Sx9
$*Fbq7$F($!3g/4VtPs\"y)Fbq7$F($!3P(yy*e)yD@)Fbq7$F($!3Yk#=\\(*[op(Fbq7
$F($!3bSn_*)*>I8(Fbq7$F($!3cIO\\a3]-mFbq7$F($!3/JOC'\\bz/'Fbq7$F($!3gQ
6*o/'y0bFbq7$F($!3W:&o!z[=Q\\Fbq7$F($!3!oKcM\\<:R%Fbq7$F($!3#R)yuM6ZKQ
Fbq7$F($!3Ydf9iR0yKFbq7$F($!3e$)[1g@goFFbq7$F($!3o&ftK!Hr%=#Fbq7$F($!3
!)4^S\"RvCm\"Fbq7$F($!3\"z#o_z7m06Fbq7$F($!3)\\N&zl7>Fd!#=7$F($F*F*-%'
COLOURG6&%$RGBGFhtFhtFht-%*LINESTYLEG6#\"\"#-F$6%7S7$$\"$+#F*F+7$FeuF/
7$FeuF27$FeuF57$FeuF87$FeuF;7$FeuF>7$FeuFA7$FeuFD7$FeuFG7$FeuFJ7$FeuFM
7$FeuFP7$FeuFS7$FeuFV7$FeuFY7$FeuFfn7$FeuFin7$FeuF\\o7$FeuF_o7$FeuFbo7
$FeuFeo7$FeuFho7$FeuF[p7$FeuF^p7$FeuFap7$FeuFdp7$FeuFgp7$FeuFjp7$FeuF]
q7$FeuF`q7$FeuFdq7$FeuFgq7$FeuFjq7$FeuF]r7$FeuF`r7$FeuFcr7$FeuFfr7$Feu
Fir7$FeuF\\s7$FeuF_s7$FeuFbs7$FeuFes7$FeuFhs7$FeuF[t7$FeuF^t7$FeuFat7$
FeuFdt7$FeuFhtFitF]u-F$6%7S7$$\"$+%F*F+7$F[yF/7$F[yF27$F[yF57$F[yF87$F
[yF;7$F[yF>7$F[yFA7$F[yFD7$F[yFG7$F[yFJ7$F[yFM7$F[yFP7$F[yFS7$F[yFV7$F
[yFY7$F[yFfn7$F[yFin7$F[yF\\o7$F[yF_o7$F[yFbo7$F[yFeo7$F[yFho7$F[yF[p7
$F[yF^p7$F[yFap7$F[yFdp7$F[yFgp7$F[yFjp7$F[yF]q7$F[yF`q7$F[yFdq7$F[yFg
q7$F[yFjq7$F[yF]r7$F[yF`r7$F[yFcr7$F[yFfr7$F[yFir7$F[yF\\s7$F[yF_s7$F[
yFbs7$F[yFes7$F[yFhs7$F[yF[t7$F[yF^t7$F[yFat7$F[yFdt7$F[yFhtFitF]u-F$6
%7S7$Fht$!\"$F*7$$\"3rmmm\"z+e_\"F-Fa\\l7$$\"3ULL3->R`GF-Fa\\l7$$\"3um
m;apSYVF-Fa\\l7$$\"3Knm;z'=$\\eF-Fa\\l7$$\"3qKL3Ft3XtF-Fa\\l7$$\"3/nmT
Nj&=t)F-Fa\\l7$$\"3-+](=`xn,\"!#:Fa\\l7$$\"3sm;ay/Gl6Fh]lFa\\l7$$\"3**
**\\PurI88Fh]lFa\\l7$$\"3SLL$e#3dl9Fh]lFa\\l7$$\"3omm\"Ht%o*f\"Fh]lFa
\\l7$$\"3=++]F_m]<Fh]lFa\\l7$$\"3\"*****\\icE->Fh]lFa\\l7$$\"3;++]s2O[
?Fh]lFa\\l7$$\"3um;aG\"H5=#Fh]lFa\\l7$$\"3ULL$ej%yQBFh]lFa\\l7$$\"3KLL
LVUUsCFh]lFa\\l7$$\"3<+](o()yyi#Fh]lFa\\l7$$\"37LLLoD[lFFh]lFa\\l7$$\"
3Y+](oibk\"HFh]lFa\\l7$$\"3I+]i!o<-1$Fh]lFa\\l7$$\"3qLL3-$=-@$Fh]lFa\\
l7$$\"3WL$3xplzM$Fh]lFa\\l7$$\"3omm\"H([a'\\$Fh]lFa\\l7$$\"3)omT&yo(3l
$Fh]lFa\\l7$$\"3#***\\7VLA&y$Fh]lFa\\l7$$\"3+nmT07KIRFh]lFa\\l7$$\"37+
++&\\@-3%Fh]lFa\\l7$$\"3#****\\PopoA%Fh]lFa\\l7$$\"3M+](oMf(oVFh]lFa\\
l7$$\"3K++DEOIEXFh]lFa\\l7$$\"31LLLoT'ym%Fh]lFa\\l7$$\"3H++]i-,>[Fh]lF
a\\l7$$\"3km;a)3rf&\\Fh]lFa\\l7$$\"3n++]Zaq0^Fh]lFa\\l7$$\"3!GL3-\"QfY
_Fh]lFa\\l7$$\"3#***\\PWF'QR&Fh]lFa\\l7$$\"3tKL$e/Xy`&Fh]lFa\\l7$$\"3U
**\\(=<\"e)o&Fh]lFa\\l7$$\"3*pmmm(zvLeFh]lFa\\l7$$\"3'pm;zAAA)fFh]lFa
\\l7$$\"37M$3-7d%HhFh]lFa\\l7$$\"3=+++&p]ZE'Fh]lFa\\l7$$\"3!RL$e*R7)>k
Fh]lFa\\l7$$\"3ommmO9]elFh]lFa\\l7$$\"3?+](o(GP1nFh]lFa\\l7$$\"3=+]78Z
!z%oFh]lFa\\l7$$\"$+(F*Fa\\lFitF]u-F$6%7S7$Fht$!#7F*7$Fd\\lFhel7$Fg\\l
Fhel7$Fj\\lFhel7$F]]lFhel7$F`]lFhel7$Fc]lFhel7$Ff]lFhel7$Fj]lFhel7$F]^
lFhel7$F`^lFhel7$Fc^lFhel7$Ff^lFhel7$Fi^lFhel7$F\\_lFhel7$F__lFhel7$Fb
_lFhel7$Fe_lFhel7$Fh_lFhel7$F[`lFhel7$F^`lFhel7$Fa`lFhel7$Fd`lFhel7$Fg
`lFhel7$Fj`lFhel7$F]alFhel7$F`alFhel7$FcalFhel7$FfalFhel7$FialFhel7$F
\\blFhel7$F_blFhel7$FbblFhel7$FeblFhel7$FhblFhel7$F[clFhel7$F^clFhel7$
FaclFhel7$FdclFhel7$FgclFhel7$FjclFhel7$F]dlFhel7$F`dlFhel7$FcdlFhel7$
FfdlFhel7$FidlFhel7$F\\elFhel7$F_elFhel7$FbelFhelFitF]u-F$6%7S7$Fht$!#
CF*7$Fd\\lF^il7$Fg\\lF^il7$Fj\\lF^il7$F]]lF^il7$F`]lF^il7$Fc]lF^il7$Ff
]lF^il7$Fj]lF^il7$F]^lF^il7$F`^lF^il7$Fc^lF^il7$Ff^lF^il7$Fi^lF^il7$F
\\_lF^il7$F__lF^il7$Fb_lF^il7$Fe_lF^il7$Fh_lF^il7$F[`lF^il7$F^`lF^il7$
Fa`lF^il7$Fd`lF^il7$Fg`lF^il7$Fj`lF^il7$F]alF^il7$F`alF^il7$FcalF^il7$
FfalF^il7$FialF^il7$F\\blF^il7$F_blF^il7$FbblF^il7$FeblF^il7$FhblF^il7
$F[clF^il7$F^clF^il7$FaclF^il7$FdclF^il7$FgclF^il7$FjclF^il7$F]dlF^il7
$F`dlF^il7$FcdlF^il7$FfdlF^il7$FidlF^il7$F\\elF^il7$F_elF^il7$FbelF^il
FitF]u-F$6%7S7$Fht$!\"'F*7$Fd\\lFd\\m7$Fg\\lFd\\m7$Fj\\lFd\\m7$F]]lFd
\\m7$F`]lFd\\m7$Fc]lFd\\m7$Ff]lFd\\m7$Fj]lFd\\m7$F]^lFd\\m7$F`^lFd\\m7
$Fc^lFd\\m7$Ff^lFd\\m7$Fi^lFd\\m7$F\\_lFd\\m7$F__lFd\\m7$Fb_lFd\\m7$Fe
_lFd\\m7$Fh_lFd\\m7$F[`lFd\\m7$F^`lFd\\m7$Fa`lFd\\m7$Fd`lFd\\m7$Fg`lFd
\\m7$Fj`lFd\\m7$F]alFd\\m7$F`alFd\\m7$FcalFd\\m7$FfalFd\\m7$FialFd\\m7
$F\\blFd\\m7$F_blFd\\m7$FbblFd\\m7$FeblFd\\m7$FhblFd\\m7$F[clFd\\m7$F^
clFd\\m7$FaclFd\\m7$FdclFd\\m7$FgclFd\\m7$FjclFd\\m7$F]dlFd\\m7$F`dlFd
\\m7$FcdlFd\\m7$FfdlFd\\m7$FidlFd\\m7$F\\elFd\\m7$F_elFd\\m7$FbelFd\\m
FitF]uFdel-F$6&7S7$Fht$!\"!F*7$Fd\\l$!3!)*****\\P-ud%Fft7$Fg\\l$!3Y***
\\iqv,c)Fft7$Fj\\l$!31++D'3ARI\"Fbq7$F]]l$!35++v.cza<Fbq7$F`]l$!3h**\\
7)>EN?#Fbq7$Fc]l$!38+]i+pb>EFbq7$Ff]l$!3/+]i&fK.0$Fbq7$Fj]l$!3/+]iN9%e
\\$Fbq7$F]^l$!3x**\\7B:#*RRFbq7$F`^l$!3Q++]xCr'R%Fbq7$Fc^l$!3]***\\()>
a!*z%Fbq7$Ff^l$!3[++]#o&*>D&Fbq7$Fi^l$!3v****\\()pz1dFbq7$F\\_l$!3+++]
<B3XhFbq7$F__l$!3D+]i&Q(3VlFbq7$Fb_l$!35++]2RN;qFbq7$Fe_l$!3l******HFF
<uFbq7$Fh_l$!3I+]iImj$)yFbq7$F[`l$!3])****\\qZkH)Fbq7$F^`l$!3o+]i!)oO
\\()Fbq7$Fa`l$!3u+](=/`1=*Fbq7$Fd`l$!34,+D1\\lI'*Fbq7$Fg`l$!30+DJ4(*Q/
5F-7$Fj`l$!3%***\\(=Yj*[5F-7$F]al$!33+DcjIE&4\"F-7$F`al$!3-+v$H+nb8\"F
-7$Fcal$!3++]ihj4z6F-7$Ffal$!3+++][k1C7F-7$Fial$!3')**\\7041o7F-7$F\\b
l$!3***\\iS!yi58F-7$F_bl$!39+](y3\"*yN\"F-7$Fbbl$!3&)****\\]#f.S\"F-7$
Febl$!33++vyIqX9F-7$Fhbl$!3#**\\ilK\"z'[\"F-7$F[cl$!3@++DM;rJ:F-7$F^cl
$!3y*\\iI9yRd\"F-7$Facl$!3\")*\\7L#)e\"=;F-7$Fdcl$!3y***\\P^`8m\"F-7$F
gcl$!3\")*\\i:Nulq\"F-7$Fjcl$!3++++$RF,v\"F-7$F]dl$!3%***\\Pomm%z\"F-7
$F`dl$!37+D1Or$)Q=F-7$Fcdl$!3-++]3_Uz=F-7$Ffdl$!3(***\\()>P%f#>F-7$Fid
l$!35+++J/bn>F-7$F\\el$!3'**\\iI'=\">,#F-7$F_el$!3%)*\\PRTrV0#F-7$Fbel
$!#@F*-Fjt6&F\\uFht$\"*++++\"!\")Fht-F^u6#\"\"$-%*THICKNESSG6#\"\"\"-F
$6&7SFi_m7$Fd\\l$!3g******\\Z![:*Fft7$Fg\\l$!3*)***\\79N?r\"Fbq7$Fj\\l
$!36++]sT%yg#Fbq7$F]]l$!3?++]27f4NFbq7$F`]l$!3B***\\iR_qS%Fbq7$Fc]l$!3
E++D,Q6R_Fbq7$Ff]l$!31++D\">l15'Fbq7$Fj]l$!35++DrGo\"*pFbq7$F]^l$!3a**
*\\i/V)zyFbq7$F`^l$!3w+++b\\U$z)Fbq7$Fc^l$!3+****\\(R3\")f*Fbq7$Ff^l$!
35++]O\"*R]5F-7$Fi^l$!3&*****\\(Rf89\"F-7$F\\_l$!3+++]jk,H7F-7$F__l$!3
0+]7xuh38F-7$Fb_l$!3-++]\"yqKS\"F-7$Fe_l$!3%******faaM[\"F-7$Fh_l$!31+
]7Etsw:F-7$F[`l$!3q*****4a*Gf;F-7$F^`l$!39+]7wL()\\<F-7$Fa`l$!3:+]P318
O=F-7$Fd`l$!3A++D\")48E>F-7$Fg`l$!34+]i=%z(3?F-7$Fj`l$!3))***\\P#p#z4#
F-7$F]al$!39+]7Fh_!>#F-7$F`al$!3/+](e+M6F#F-7$Fcal$!3+++DBF>eBF-7$Ffal
$!3++++(*G8[CF-7$Fial$!3q***\\-\"=7ODF-7$F\\bl$!3)***\\73cD@EF-7$F_bl$
!3D++vv@y:FF-7$Fbbl$!3r*****4]=2!GF-7$Febl$!3;++]dhS\"*GF-7$Fhbl$!3#)*
*\\7`EetHF-7$F[cl$!3U++]oKUjIF-7$F^cl$!3a**\\7'Gcz9$F-7$Facl$!3h**\\iY
wJOKF-7$Fdcl$!3c****\\FqqALF-7$Fgcl$!3j**\\7.([JT$F-7$Fjcl$!3++++'ya-]
$F-7$F]dl$!3')***\\nLL$*e$F-7$F`dl$!3C+]7sUnxOF-7$Fcdl$!3-+++</&)ePF-7
$Ffdl$!3%****\\(Ru)=&QF-7$Fidl$!3=+++i35NRF-7$F\\el$!3$***\\7EP#Q-%F-7
$F_el$!3l**\\(y#Gu3TF-7$Fbel$!#UF*-Fjt6&F\\uFhtFhtF^imFaimFdim-F$6%7bo
7$$\"#5F*$!3C0TaBu!*oI!#>7$$\"#?F*$!35h)>@!)e')4*Fft7$$\"#IF*$!3Ca*yBn
>%))>Fbq7$$\"#SF*$!3Y([ob!**pcJFbq7$$\"#]F*$!3]U<i+^5nVFbq7$$\"#gF*$!3
#e$yg'o;6E%Fbq7$$\"#qF*$!30N'G9y9M7#Fbq7$$\"#!)F*$!39w!y>m#=R<Fbq7$$\"
#!*F*$!3E0@/#)*ofN#Fbq7$F($!3,YRLa2tFIFbq7$$\"$5\"F*$!31iLqD_S0PFbq7$$
\"$?\"F*$!3c@cb%[hWP%Fbq7$$\"$I\"F*$!3JwIC@jDD]Fbq7$$\"$S\"F*$!3UXG6Y-
S^cFbq7$$\"$]\"F*$!37#fNU?@$\\iFbq7$$\"$g\"F*$!3_xzHYg1<oFbq7$$\"$q\"F
*$!3ilY(o,]UN(Fbq7$$\"$!=F*$!3s#Rhd)GMhyFbq7$$\"$!>F*$!3vf2ZL4aR$)Fbq7
$Feu$!3m!pMz.l1z)Fbq7$$\"$5#F*$!3=G,4qoU;#*Fbq7$$\"$?#F*$!3DbvQZ,$*='*
Fbq7$$\"$I#F*$!35G]YVQ/+5F-7$$\"$S#F*$!3#H6H&z_GO5F-7$$\"$]#F*$!3i[`ji
.cr5F-7$$\"$g#F*$!3k#Hm(>zc=6F-7$$\"$q#F*$!3/S5R!3L;=\"F-7$$\"$!GF*$!3
KH%G')o%og7F-7$$\"$!HF*$!3'>OuE`5fN\"F-7$$\"$+$F*$!3Ao-j$*Rqn9F-7$$\"$
5$F*$!3)pG9n&of'f\"F-7$$\"$?$F*$!3()efRsg9V<F-7$$\"$I$F*$!3%*QlWyY*f$=
F-7$$\"$S$F*$!3[digbi&*\\=F-7$$\"$]$F*$!3I)f#)H*4ph=F-7$$\"$g$F*$!3#*)
yZYO8;(=F-7$$\"$q$F*$!3?0q$*zt4!)=F-7$$\"$!QF*$!33;:q2&3v)=F-7$$\"$!RF
*$!3!e(oH8d7%*=F-7$F[y$!3DbYi&zM-!>F-7$$\"$5%F*$!3N#RZqCrg!>F-7$$\"$?%
F*$!3u1XIE&*y6>F-7$$\"$I%F*$!3(>,c/#>i<>F-7$$\"$S%F*$!3FY)\\1o=O#>F-7$
$\"$]%F*$!3tpBu-C%*H>F-7$$\"$g%F*$!32'f/\"f^qO>F-7$$\"$q%F*$!30;o!QzzR
%>F-7$$\"$![F*$!3#)4'eglG=&>F-7$$\"$!\\F*$!3Q#o/%)R'Gg>F-7$$\"$+&F*$!3
%>V+&)[)Qp>F-7$$\"$5&F*$!3]W2duOBz>F-7$$\"$?&F*$!39nv;;'3)*)>F-7$$\"$I
&F*$!3\"Re)e'za6+#F-7$$\"$S&F*$!3h6[POaG8?F-7$$\"$]&F*$!3F7+@1FwH?F-7$
$\"$g&F*$!3KK;*Qly-1#F-7$$\"$q&F*$!3?FRNYDD0@F-7$$\"$!eF*$!3-#*Hqj<jk@
F-7$$\"$!fF*$!3\\*4'3nTTQAF-7$$\"$+'F*$!3h!>kzQ%fEBF-7$$\"$5'F*$!3)p^/
#ff2HCF-7$$\"$?'F*$!3$yP[#3[#*QDF-7$$\"$I'F*$!3o,]:j'*=ZDF-7$$\"$S'F*$
!3%y`!>(p+kb#F-7$$\"$]'F*$!3-t]$=YSnc#F-7$$\"$g'F*$!3+&)zpy78yDF-7$$\"
$q'F*$!3Qz9%=#=t!f#F-7$$\"$!oF*$!3Vf<MU+]/EF-7$$\"$!pF*$!3\"pK#)GiU&>E
F-7$Fbel$!3-0^y**)pej#F--Fjt6&F\\uF^imFhtFhtFdim-%%FONTG6%%&TIMESG%&RO
MANGFbcn-%&TITLEG6$QCAmplitude~Frequency~Characteristic6\"-Fjho6%F\\io
F]io\"#9-%+AXESLABELSG6'Q'f~[Hz]FbioQ'A~[dB]Fbio-Fjho6#%(DEFAULTG%+HOR
IZONTALG%)VERTICALG-%*AXESSTYLEG6#%&FRAMEG-%%VIEWG6$;FhtFbel;$!++*pej#
F`im$FgimF*" 1 2 0 1 10 0 2 9 1 3 2 1.000000 45.000000 45.000000 0 0 "
Curve 1" "Curve 2" "Curve 3" "Curve 4" "Curve 5" "Curve 6" "Curve 7" "
Curve 8" "Curve 9" "Curve 10" "Curve 11" }}}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 1 " " }}}}{MARK "4 0 0" 0 }{VIEWOPTS 1 1 0 1 1 1803 1 1 
1 1 }{PAGENUMBERS 0 1 2 33 1 1 }
